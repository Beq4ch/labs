#include <iostream> // Подключение библиотеки для ввода-вывода
#include <windows.h> // Подключение библиотеки для работы с консолью
#include <fstream> // Подключение библиотеки для работы с файлами
using namespace std; // Использование пространства имен std

// Определение узла стека
struct Node {
    int data; // Данные узла
    Node* next; // Указатель на следующий узел
};

// Определение класса стека
class Stack {
private:
    Node* top; // Вершина стека
public:
    Stack() {
        top = nullptr;  // Конструктор стека, инициализирует вершину nullptr
    }

    void push(int value) { // Метод для добавления элемента в стек
        Node* node = new Node(); // Создание нового узла

        node->data = value; // Присваивание данных узлу
        node->next = top; // Связывание узла с вершиной стека
        top = node; // Обновление вершины стека
    }

    int pop() { // Метод для извлечения элемента из стека
        if (isEmpty()) { // Если стек пуст
            cout << "Стек пуст!\n"; // Выводим сообщение
            return -1; // Возвращаем -1
        }

        Node* temp = top; // Временный указатель на вершину стека
        int value = temp->data; // Сохранение данных удаляемого узла
        top = top->next; // Перемещение вершины на следующий узел
        delete temp; // Удаление узла
        return value; // Возвращение данных удаляемого узла
    }

    int count() {
        Node* temp = top;
        int k = 0;

        while (temp != nullptr) {
            temp = temp->next; // Перемещение вершины на следующий узел
            k++;
        }

        return k;
    }

    bool isEmpty() { // Метод для проверки на пустоту стека
        return top == nullptr; // Стек пуст, если вершина равна nullptr
    }
};


int main(int argc, char* argv[])
{
    SetConsoleCP(1251); // Установка кодировки консоли для ввода
    SetConsoleOutputCP(1251); // Установка кодировки консоли для вывода

    Stack stack; // Создание стека

    int x = 1; // Переменная для ввода чисел

    bool human = true; // Переменная для выбора интерфейса
    if (argc > 1) // Если есть аргумент командной строки
        human = (argv[1][0] == 't'); // Присваиваем ему значение true или false

    ofstream out("data.txt"); // Создаем объект для записи в файл

    if (human) { // Если интерфейс для человека
        cout << "Введите последовательность чисел. Для того, чтобы завершить ввод введите 0\n"; // Выводим подсказку

        for (int i = 0; x != 0; i++) { // Для каждого введенного числа
            cout << "a" << i << " = "; // Выводим индекс
            cin >> x; // Считываем число
            if (x != 0) {
                out << x << "\n"; // Записываем число в файл
                stack.push(x); // Добавляем число в стек
            }
        }

        cout << "Положительные числа в стеке: \n"; // Выводим подсказку
    }
    else // Если интерфейс для программы
    {
        while (x != 0) { // Пока не введен 0
            cin >> x; // Считываем число с клавиатуры
            if (x != 0) {
                out << x << "\n"; // Записываем число в файл
                stack.push(x); // Добавляем число в стек
            }
        }
    }

    out.close(); // Закрываем файл

    cout << stack.count() << endl;

    ofstream report("report.txt"); // Создаем объект для записи в файл
    while (!stack.isEmpty()) { // Пока стек не пуст
        int value = stack.pop(); // Сохраняем и удаляем данные вершины стека
        if (value > 0) { // Если данные положительные
            cout << value << "\n"; // Выводим число на консоль
            report << value << "\n"; // Записываем число в файл
        }
    }

    report.close(); // Закрываем файл

    system("pause");
}
